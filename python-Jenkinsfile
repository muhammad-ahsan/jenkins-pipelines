pipeline {
    agent any

    environment {
        REGISTRY = 'mahsan/sample-pyproject'
    }
    stages {
        stage('System configuration') {
            steps {
                echo 'CI/CD Pipeline is triggered'
                sh '''
                    uname -mrs
                    docker --version
                    python3 --version
                    pip3 --version
                '''
            }
        }
        stage("Checkout Code") {
            steps {
                script {
                    git branch: "main",
                        credentialsId: '77055661-9ced-4e36-97b7-39bb023caded',
                        url: 'https://github.com/muhammad-ahsan/sample-pyproject.git'
                }
            }
        }
        stage('Installing packages') {
            steps {
                script {
                    sh '''
                        python3 -m venv env
                        source env/bin/activate
                        echo 'Installing packages in newly created python environment'
                        python3 -m pip install --upgrade pip
                        python3 -m pip install --user pylint pytest pytest-cov
                        python3 -m pip install -r requirements.txt
                    '''
                }
            }
        }
        stage('Code Linting'){
           steps {
                sh 'whereis python3'
                sh 'python3 -m pylint --output-format=parseable $(git ls-files "*.py") --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" || cat pylint.log || echo "pylint exited with status = $?"'

                // Warnings Next Generation Plugin
                recordIssues(
                        unstableTotalHigh: 100,
                        enabledForFailure: true,
                        aggregatingResults: true,
                        tool: pyLint(pattern: 'pylint.log')
                )
                echo "Generating Report - Linting Success"
            }
           post {
                failure {
                    error('Abort because of pylint warnings')
                }
           }
        }
        stage('Code Testing'){
           steps {
                sh 'python3 -m pytest --cov ./ --cov-report html --verbose'
                publishHTML(target:
                    [allowMissing: false,
                      alwaysLinkToLastBuild: false,
                    keepAll: false,
                    reportDir: 'htmlcov',
                    reportFiles: 'index.html',
                    reportName: 'Test Report',
                    reportTitles: '']
                )
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${REGISTRY}:build-$BUILD_NUMBER .'
                echo 'Docker image build '
            }
        }
        stage('Push Docker to Registry') {
            steps {
                sh 'docker push ${REGISTRY}:build-$BUILD_NUMBER'
                echo 'Docker image pushed to docker registry'
            }
        }
    }
    post {
        always {
            echo 'Post stages pipeline cleanup'
            // Any cleanup code if required
        }
   }
}

